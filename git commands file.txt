sudo apt-get install git-all

yum install git


git --version
git init


git config --global user.name "github username"

git config --global user.email "github mailid"
git config --global user.email
git config --global user.name
git config --list


 git clone git://git.kernel.org/pub/scm/git/git.git



<<git help <verb>
$ git <verb> --help
$ man git-<verb>
git help config

>>

git pull  githuburl

git fetch [remote-name]


git remote

git remote add filename github repourl

git remote -v

$ git remote show [url-name]

Removing and Renaming Remotes
You can run git remote rename to change a remote’s shortname. For instance, if you want to rename pb to paul, you can do so with git remote rename:

 git remote rename

git remote remove

git status

git add .
git add file name


git diff

git diff --staged  or git diff --cached 

git reset HEAD filename

git checkout file

git commit

git commit -m "message"

git last
git show
git HEAD


 git push [remote-name] [branchname] 


git log

One of the more helpful options is -p, which shows the difference introduced in each commit. You can also use -2, which limits the output to only the last two entries:

$ git log -p -2


note:
As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end.

git log --stat
note :

Another really useful option is --pretty. This option changes the log output to formats other than the default. A few prebuilt options are available for you to use. The oneline option prints each commit on a single line, which is useful if you’re looking at a lot of commits. In addition, the short, full, and fuller options show the output in roughly the same format but with less or more information, respectively:

git log --pretty=oneline

git log --author="author name"

git checkout commit id  filename

git show

git show commit number
 
git branch

git branch -v

 git branch <<branch name>>

git checkout branchname

git checkout -b <<branch name>>

git branch -d <<branchname>>




git merge << bracnh name>>

git rebase <<branch name>>

 git branch --merged


 git branch --no-merged


git checkout -b [branch] [remotename]/[branch]



 

git mergetool 
git mv oldfile  newfilename

git mv filename directory path

git rm filename

git rm --cached 

git tag

 git tag show <<tag name>>

git tag -a <<version number>> <<tagname>>
git tag  -a <<version>> <<commit id >>

git checkout -b version2 v2.0.0 to move tag one branch to any other branch
  

to push tags git bash to git hub :

git push origin <<tag version>> --to send perticular tg

git push origin  --tags

git push origin <<branch name>>

git stash







